#!/bin/bash

# Exit on any error
set -euo pipefail

# Optional: run tests
# npm test

echo "🔍 Starting pre-commit checks..."

# 1. Get staged files (excluding deleted ones) and filter for formatable types
staged_files=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.(js|ts|jsx|tsx|json|css|scss|md|astro|html)$' | grep -vE '(^|/)package(-lock)?\.json$' || true)

echo "📄 Staged files: $staged_files"

# 2. Format with Prettier
if [ -n "$staged_files" ]; then
  echo "🎨 Formatting with Prettier..."
  echo "$staged_files" | tr '\n' '\0' | xargs -0 npx prettier --write
  git add $staged_files
else
  echo "✨ No formatable files found."
fi

# 3. Check for console/debugger/alert in JS/TS files
js_files=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.(js|ts|jsx|tsx)$' || true)

if [ -n "$js_files" ]; then
  bad_code=$(echo "$js_files" | while IFS= read -r file; do
    [ -f "$file" ] && grep -nE 'console\.(log|debug|warn|error|info)\(|debugger;|alert\(' "$file"
  done || true)

  if [ -n "$bad_code" ]; then
    echo -e "\033[0;31m🚫 Error: Debug/log code found (Remove all console, debugger, alert). Remove before committing:\033[0m"
    echo "$bad_code"
    exit 1
  fi
fi

# 4 Check for empty new files
echo "📏 Checking for empty newly added files..."
git diff --cached --name-only --diff-filter=A | while IFS= read -r file; do
  [ -f "$file" ] || continue
  sha=$(git ls-files -s -- "$file" | awk '{print $2}')
  [[ -z "$sha" ]] && continue
  size=$(git cat-file -s "$sha")
  if [[ "$size" -eq 0 ]]; then
    echo -e "\033[31m❌ Error: Empty new file staged: '$file'\033[0m"
    echo "⚠️  Please add content or remove the file before committing."
    exit 1
  fi
done

echo -e "\033[32m✅ Pre-commit checks passed!\033[0m"
